// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thriftutil

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type ErrInfo struct {
	Code int32  `thrift:"code,1,required" json:"code"`
	Msg  string `thrift:"msg,2,required" json:"msg"`
}

func NewErrInfo() *ErrInfo {
	return &ErrInfo{}
}

func (p *ErrInfo) GetCode() int32 {
	return p.Code
}

func (p *ErrInfo) GetMsg() string {
	return p.Msg
}
func (p *ErrInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ErrInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *ErrInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *ErrInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ErrInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ErrInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:code: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return fmt.Errorf("%T.code (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:code: %s", p, err)
	}
	return err
}

func (p *ErrInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:msg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return fmt.Errorf("%T.msg (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:msg: %s", p, err)
	}
	return err
}

func (p *ErrInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ErrInfo(%+v)", *p)
}

type Head struct {
	Uid     int64  `thrift:"uid,1" json:"uid"`
	Source  int32  `thrift:"source,2" json:"source"`
	Ip      string `thrift:"ip,3" json:"ip"`
	Region  string `thrift:"region,4" json:"region"`
	Dt      int32  `thrift:"dt,5" json:"dt"`
	Unionid string `thrift:"unionid,6" json:"unionid"`
}

func NewHead() *Head {
	return &Head{}
}

func (p *Head) GetUid() int64 {
	return p.Uid
}

func (p *Head) GetSource() int32 {
	return p.Source
}

func (p *Head) GetIp() string {
	return p.Ip
}

func (p *Head) GetRegion() string {
	return p.Region
}

func (p *Head) GetDt() int32 {
	return p.Dt
}

func (p *Head) GetUnionid() string {
	return p.Unionid
}
func (p *Head) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Head) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *Head) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Source = v
	}
	return nil
}

func (p *Head) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Ip = v
	}
	return nil
}

func (p *Head) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Region = v
	}
	return nil
}

func (p *Head) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Dt = v
	}
	return nil
}

func (p *Head) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Unionid = v
	}
	return nil
}

func (p *Head) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Head"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Head) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:uid: %s", p, err)
	}
	return err
}

func (p *Head) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:source: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Source)); err != nil {
		return fmt.Errorf("%T.source (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:source: %s", p, err)
	}
	return err
}

func (p *Head) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:ip: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ip)); err != nil {
		return fmt.Errorf("%T.ip (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:ip: %s", p, err)
	}
	return err
}

func (p *Head) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("region", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:region: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Region)); err != nil {
		return fmt.Errorf("%T.region (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:region: %s", p, err)
	}
	return err
}

func (p *Head) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dt", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:dt: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Dt)); err != nil {
		return fmt.Errorf("%T.dt (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:dt: %s", p, err)
	}
	return err
}

func (p *Head) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("unionid", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:unionid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Unionid)); err != nil {
		return fmt.Errorf("%T.unionid (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:unionid: %s", p, err)
	}
	return err
}

func (p *Head) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Head(%+v)", *p)
}

type Context struct {
	Head *Head `thrift:"head,1" json:"head"`
}

func NewContext() *Context {
	return &Context{}
}

var Context_Head_DEFAULT *Head

func (p *Context) GetHead() *Head {
	if !p.IsSetHead() {
		return Context_Head_DEFAULT
	}
	return p.Head
}
func (p *Context) IsSetHead() bool {
	return p.Head != nil
}

func (p *Context) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Context) ReadField1(iprot thrift.TProtocol) error {
	p.Head = &Head{}
	if err := p.Head.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Head, err)
	}
	return nil
}

func (p *Context) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Context"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Context) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("head", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:head: %s", p, err)
	}
	if err := p.Head.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Head, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:head: %s", p, err)
	}
	return err
}

func (p *Context) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Context(%+v)", *p)
}
